{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d3a0634f4daeb54201a6d7c6a75d1ad3781dc97eb1e5355b2f3ef095db74f37",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1050270",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x63fbfdb036e09def05a4f462b89290990732c9dbc33c774000440aabc2df5d57",
    "transactionHash": "0x3d3a0634f4daeb54201a6d7c6a75d1ad3781dc97eb1e5355b2f3ef095db74f37",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1050270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0abb1ab3c4e8ef1f6a52bc2ab97247e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Evans Atoko\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//pragma\\npragma solidity ^0.8.7;\\n\\n//imports\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//error codes\\n\\nerror FundMe__NotOwner();\\n\\n//interfaces , libraries , contracts\\n\\n//NatSpec\\n/**\\n * @title A contract for crowd funding\\n * @author  Evans Atoko\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    //Type declarations\\n    using PriceConverter for uint256;\\n\\n    //state variables\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert(\\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    //functions Order\\n    ////constructor\\n    ////receive\\n    ////fallback\\n    ////external\\n    ////public\\n    ////internal\\n    ////private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings cannot be in memmory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x35f2cc657794b50d0a227c47124c067b3891c4bfb941f46d6c984e966b591b82\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x21bde6037c92d9944954fa1332499d949f115c0c4bc4e45f3b544e7fd499cafe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001328380380620013288339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6111a262000186600039600081816101e30152818161043b015281816105c501526107c401526111a26000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8e565b610199565b6040516100b49190610cc7565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc61042a565b6040516100e99190610cc7565b60405180910390f35b3480156100fe57600080fd5b50610107610437565b6040516101149190610c31565b60405180910390f35b34801561012957600080fd5b5061013261045f565b60405161013f9190610c4c565b60405180910390f35b610150610489565b005b61015a6105c3565b005b34801561016857600080fd5b50610183600480360381019061017e9190610abb565b61085a565b6040516101909190610c31565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690610c87565b60405180910390fd5b60005b60018054905081101561031a576000600182815481106102955761029461102f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031290610f88565b915050610272565b50600067ffffffffffffffff8111156103365761033561105e565b5b6040519080825280602002602001820160405280156103645781602001602082028036833780820191505090505b506001908051906020019061037a92919061097e565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a190610c1c565b60006040518083038185875af1925050503d80600081146103de576040519150601f19603f3d011682016040523d82523d6000602084013e6103e3565b606091505b5050905080610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90610c67565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104c8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a290919063ffffffff16565b1015610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090610ca7565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105579190610cfe565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890610c87565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068b575b5050505050905060005b815181101561075f5760008282815181106106fd576106fc61102f565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075790610f88565b9150506106df565b50600067ffffffffffffffff81111561077b5761077a61105e565b5b6040519080825280602002602001820160405280156107a95781602001602082028036833780820191505090505b50600190805190602001906107bf92919061097e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080690610c1c565b60006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b505090508061085657600080fd5b5050565b6000600182815481106108705761086f61102f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ae836108de565b90506000670de0b6b3a764000085836108c79190610e9c565b6108d19190610d54565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190610ae8565b5050509150506402540be400816109769190610d85565b915050919050565b8280548282559060005260206000209081019282156109f7579160200282015b828111156109f65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099e565b5b509050610a049190610a08565b5090565b5b80821115610a21576000816000905550600101610a09565b5090565b600081359050610a3481611110565b92915050565b600081519050610a4981611127565b92915050565b600081359050610a5e8161113e565b92915050565b600081519050610a738161113e565b92915050565b600081519050610a8881611155565b92915050565b600060208284031215610aa457610aa361108d565b5b6000610ab284828501610a25565b91505092915050565b600060208284031215610ad157610ad061108d565b5b6000610adf84828501610a4f565b91505092915050565b600080600080600060a08688031215610b0457610b0361108d565b5b6000610b1288828901610a79565b9550506020610b2388828901610a3a565b9450506040610b3488828901610a64565b9350506060610b4588828901610a64565b9250506080610b5688828901610a79565b9150509295509295909350565b610b6c81610ef6565b82525050565b610b7b81610f52565b82525050565b6000610b8e600b83610ced565b9150610b9982611092565b602082019050919050565b6000610bb1601783610ced565b9150610bbc826110bb565b602082019050919050565b6000610bd4601b83610ced565b9150610bdf826110e4565b602082019050919050565b6000610bf7600083610ce2565b9150610c028261110d565b600082019050919050565b610c1681610f32565b82525050565b6000610c2782610bea565b9150819050919050565b6000602082019050610c466000830184610b63565b92915050565b6000602082019050610c616000830184610b72565b92915050565b60006020820190508181036000830152610c8081610b81565b9050919050565b60006020820190508181036000830152610ca081610ba4565b9050919050565b60006020820190508181036000830152610cc081610bc7565b9050919050565b6000602082019050610cdc6000830184610c0d565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d0982610f32565b9150610d1483610f32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4957610d48610fd1565b5b828201905092915050565b6000610d5f82610f32565b9150610d6a83610f32565b925082610d7a57610d79611000565b5b828204905092915050565b6000610d9082610f08565b9150610d9b83610f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dda57610dd9610fd1565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1757610e16610fd1565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e5457610e53610fd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e9157610e90610fd1565b5b828202905092915050565b6000610ea782610f32565b9150610eb283610f32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eeb57610eea610fd1565b5b828202905092915050565b6000610f0182610f12565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5d82610f64565b9050919050565b6000610f6f82610f76565b9050919050565b6000610f8182610f12565b9050919050565b6000610f9382610f32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fc657610fc5610fd1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61111981610ef6565b811461112457600080fd5b50565b61113081610f08565b811461113b57600080fd5b50565b61114781610f32565b811461115257600080fd5b50565b61115e81610f3c565b811461116957600080fd5b5056fea26469706673582212209b0fb15eff5af803c26dcc162f40e2ab7a9d04a79695bbaecc25660e06cf296064736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8e565b610199565b6040516100b49190610cc7565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc61042a565b6040516100e99190610cc7565b60405180910390f35b3480156100fe57600080fd5b50610107610437565b6040516101149190610c31565b60405180910390f35b34801561012957600080fd5b5061013261045f565b60405161013f9190610c4c565b60405180910390f35b610150610489565b005b61015a6105c3565b005b34801561016857600080fd5b50610183600480360381019061017e9190610abb565b61085a565b6040516101909190610c31565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026690610c87565b60405180910390fd5b60005b60018054905081101561031a576000600182815481106102955761029461102f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031290610f88565b915050610272565b50600067ffffffffffffffff8111156103365761033561105e565b5b6040519080825280602002602001820160405280156103645781602001602082028036833780820191505090505b506001908051906020019061037a92919061097e565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a190610c1c565b60006040518083038185875af1925050503d80600081146103de576040519150601f19603f3d011682016040523d82523d6000602084013e6103e3565b606091505b5050905080610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90610c67565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104c8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a290919063ffffffff16565b1015610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090610ca7565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105579190610cfe565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064890610c87565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068b575b5050505050905060005b815181101561075f5760008282815181106106fd576106fc61102f565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075790610f88565b9150506106df565b50600067ffffffffffffffff81111561077b5761077a61105e565b5b6040519080825280602002602001820160405280156107a95781602001602082028036833780820191505090505b50600190805190602001906107bf92919061097e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080690610c1c565b60006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b505090508061085657600080fd5b5050565b6000600182815481106108705761086f61102f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ae836108de565b90506000670de0b6b3a764000085836108c79190610e9c565b6108d19190610d54565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190610ae8565b5050509150506402540be400816109769190610d85565b915050919050565b8280548282559060005260206000209081019282156109f7579160200282015b828111156109f65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099e565b5b509050610a049190610a08565b5090565b5b80821115610a21576000816000905550600101610a09565b5090565b600081359050610a3481611110565b92915050565b600081519050610a4981611127565b92915050565b600081359050610a5e8161113e565b92915050565b600081519050610a738161113e565b92915050565b600081519050610a8881611155565b92915050565b600060208284031215610aa457610aa361108d565b5b6000610ab284828501610a25565b91505092915050565b600060208284031215610ad157610ad061108d565b5b6000610adf84828501610a4f565b91505092915050565b600080600080600060a08688031215610b0457610b0361108d565b5b6000610b1288828901610a79565b9550506020610b2388828901610a3a565b9450506040610b3488828901610a64565b9350506060610b4588828901610a64565b9250506080610b5688828901610a79565b9150509295509295909350565b610b6c81610ef6565b82525050565b610b7b81610f52565b82525050565b6000610b8e600b83610ced565b9150610b9982611092565b602082019050919050565b6000610bb1601783610ced565b9150610bbc826110bb565b602082019050919050565b6000610bd4601b83610ced565b9150610bdf826110e4565b602082019050919050565b6000610bf7600083610ce2565b9150610c028261110d565b600082019050919050565b610c1681610f32565b82525050565b6000610c2782610bea565b9150819050919050565b6000602082019050610c466000830184610b63565b92915050565b6000602082019050610c616000830184610b72565b92915050565b60006020820190508181036000830152610c8081610b81565b9050919050565b60006020820190508181036000830152610ca081610ba4565b9050919050565b60006020820190508181036000830152610cc081610bc7565b9050919050565b6000602082019050610cdc6000830184610c0d565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d0982610f32565b9150610d1483610f32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4957610d48610fd1565b5b828201905092915050565b6000610d5f82610f32565b9150610d6a83610f32565b925082610d7a57610d79611000565b5b828204905092915050565b6000610d9082610f08565b9150610d9b83610f08565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dda57610dd9610fd1565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1757610e16610fd1565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e5457610e53610fd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e9157610e90610fd1565b5b828202905092915050565b6000610ea782610f32565b9150610eb283610f32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eeb57610eea610fd1565b5b828202905092915050565b6000610f0182610f12565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f5d82610f64565b9050919050565b6000610f6f82610f76565b9050919050565b6000610f8182610f12565b9050919050565b6000610f9382610f32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fc657610fc5610fd1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61111981610ef6565b811461112457600080fd5b50565b61113081610f08565b811461113b57600080fd5b50565b61114781610f32565b811461115257600080fd5b50565b61115e81610f3c565b811461116957600080fd5b5056fea26469706673582212209b0fb15eff5af803c26dcc162f40e2ab7a9d04a79695bbaecc25660e06cf296064736f6c63430008070033",
  "devdoc": {
    "author": "Evans Atoko",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}